// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Link {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(50)
  publicName  String   @map("public_name") @db.VarChar(255)
  destination String   @db.VarChar(255)
  slug        String   @db.VarChar(255)
  appName     String   @map("app_name") @db.VarChar(50)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp()
  tenantId    String   @map("tenant_id")

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@map("links")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(50)
  slug      String   @db.VarChar(255)
  plan      String   @db.VarChar(30)
  image     String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()

  tenantUsers TenantUser[]
  links       Link[]

  @@map("tenants")
}

model TenantUser {
  userId   String @map("user_id")
  tenantId String @map("tenant_id")

  user   User   @relation(fields: [userId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])

  assignedAt DateTime @default(now()) @map("assigned_at") @db.Timestamp()
  role       String

  @@id([userId, tenantId])
  @@map("tenant_user")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  accounts    Account[]
  sessions    Session[]
  userTenants TenantUser[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
